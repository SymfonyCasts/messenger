WEBVTT

00:00:01.046 --> 00:00:03.746 align:middle
La última opción que quiero
mencionar es interesante...

00:00:04.066 --> 00:00:06.316 align:middle
pero también puede ser confusa.

00:00:07.206 --> 00:00:09.646 align:middle
Se llama from_transport.

00:00:11.576 --> 00:00:16.556 align:middle
Si te fijas en messenger.yaml, este DeleteImagePost
no se enruta a ninguna parte, lo que

00:00:16.886 --> 00:00:18.986 align:middle
significa que se maneja de forma sincrónica.

00:00:20.036 --> 00:00:23.756 align:middle
Imaginemos que queremos
manejarlo de forma asíncrona...

00:00:23.846 --> 00:00:27.166 align:middle
y que lo dirigimos al transporte async.

00:00:28.146 --> 00:00:30.246 align:middle
Establece from_transport en async...

00:00:31.346 --> 00:00:35.726 align:middle
y luego enruta temporalmente esta clase
a ese transporte en messenger.yaml.

00:00:39.376 --> 00:00:45.156 align:middle
Ahora, imagina que el mensaje DeleteImagePost
tiene realmente dos manejadores...

00:00:45.646 --> 00:00:48.206 align:middle
algo que es muy posible para los eventos.

00:00:49.156 --> 00:00:55.456 align:middle
Suponiendo que aún no hayamos añadido esta configuración
de from_transport, si enviaste DeleteImagePost

00:00:55.456 --> 00:01:00.986 align:middle
al transporte async, entonces cuando ese mensaje
sea leído desde ese transporte por un trabajador,

00:01:01.376 --> 00:01:04.716 align:middle
ambos manejadores se ejecutarán uno tras otro.

00:01:05.326 --> 00:01:10.726 align:middle
Pero, ¿qué pasaría si quisieras, más o menos,
enviar un manejador de ese mensaje a un transporte,

00:01:11.016 --> 00:01:16.386 align:middle
quizá async_priority_high, y
otro manejador a otro transporte?

00:01:17.316 --> 00:01:20.696 align:middle
Pues bien, en Messenger, no
se envían "manejadores"...

00:01:20.806 --> 00:01:22.386 align:middle
envías mensajes...

00:01:22.676 --> 00:01:27.686 align:middle
y cuando Messenger consume un mensaje, llama
a todos los manejadores de ese mensaje.

00:01:28.386 --> 00:01:32.536 align:middle
¿Significa eso que es imposible
hacer que un manejador de un mensaje

00:01:32.596 --> 00:01:34.586 align:middle
tenga una prioridad "alta" y otro baja?

00:01:35.436 --> 00:01:38.016 align:middle
No Este flujo de trabajo es posible.

00:01:39.246 --> 00:01:45.196 align:middle
En primer lugar, dirige DeleteImagePost a los
dos transportes async y async_priority_high.

00:01:46.346 --> 00:01:50.816 align:middle
Si sólo hiciéramos esto, el mensaje
se enviaría a ambos transportes,

00:01:51.176 --> 00:01:56.206 align:middle
se consumiría dos veces, y cada
manejador sería llamado dos veces...

00:01:56.206 --> 00:01:58.486 align:middle
lo cual no es en absoluto lo que queremos...

00:01:58.956 --> 00:02:01.546 align:middle
a no ser que cada manejador
esté horneando galletas...

00:02:01.546 --> 00:02:01.956 align:middle
o algo así.

00:02:01.956 --> 00:02:06.896 align:middle
Pero cuando añadimos esta opción
from_transport configurada en async,

00:02:07.226 --> 00:02:10.476 align:middle
significa que este manejador
sólo debe ser llamado

00:02:10.676 --> 00:02:15.616 align:middle
cuando se consuma un objeto
DeleteImagePost desde el transporte async.

00:02:16.606 --> 00:02:22.186 align:middle
Si configuramos un segundo manejador con from_transport
establecido en async_priority_high, ese manejador

00:02:22.576 --> 00:02:28.076 align:middle
sólo sería llamado cuando el mensaje
se consuma desde ese transporte. En

00:02:29.306 --> 00:02:34.696 align:middle
otras palabras, estás enviando el mensaje a
dos transportes, pero cada uno de ellos sabe

00:02:34.696 --> 00:02:37.526 align:middle
que sólo debe ejecutar un manejador.

00:02:38.476 --> 00:02:43.646 align:middle
Esto permite que tus dos manejadores se pongan en cola y sean
ejecutados por los trabajadores de forma independiente el uno del otro.

00:02:44.246 --> 00:02:45.886 align:middle
Es una función realmente potente...

00:02:46.226 --> 00:02:50.476 align:middle
pero como Messenger se centra en el
envío de mensajes a los transportes,

00:02:50.786 --> 00:02:53.216 align:middle
su uso excesivo puede resultar confuso.

00:02:54.516 --> 00:02:56.766 align:middle
Vamos a comentar esto y a eliminar
la configuración de enrutamiento.

00:02:58.646 --> 00:03:01.546 align:middle
Eso es básicamente todo para las
opciones que puedes pasar aquí...

00:03:01.546 --> 00:03:04.576 align:middle
aunque siempre puedes consultar
MessageSubscriberInterface:

00:03:05.506 --> 00:03:07.176 align:middle
que habla de lo que está disponible.

00:03:08.366 --> 00:03:14.196 align:middle
A continuación, vamos a mejorar nuestro juego de
colas cambiando el transporte Doctrine por RabbitMQ,

00:03:14.806 --> 00:03:18.136 align:middle
también conocido como AMQP.

00:03:18.706 --> 00:03:20.316 align:middle
¡Es muy divertido!
