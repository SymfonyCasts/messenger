WEBVTT

00:00:01.016 --> 00:00:04.136 align:middle
Al parecer, ahora que hemos
configurado un failure_transport,

00:00:04.466 --> 00:00:10.866 align:middle
si la gestión de un mensaje sigue sin funcionar después
de 3 reintentos, en lugar de enviarse a /dev/null, se

00:00:11.096 --> 00:00:15.606 align:middle
envía a otro transporte, en
nuestro caso llamado "fallido".

00:00:16.406 --> 00:00:17.276 align:middle
Ese transporte es...

00:00:17.626 --> 00:00:21.016 align:middle
realmente... el mismo que
cualquier otro transporte...

00:00:21.136 --> 00:00:26.016 align:middle
y podríamos utilizar el comando messenger:consume
para intentar procesar de nuevo esos mensajes.

00:00:26.626 --> 00:00:28.556 align:middle
Pero hay una forma mejor.

00:00:29.406 --> 00:00:34.216 align:middle
Ejecuta: php bin/console messenger ¡Oye!

00:00:34.446 --> 00:00:36.786 align:middle
¡Aquí se esconden nuevos
y brillantes comandos!

00:00:37.376 --> 00:00:39.436 align:middle
Tres bajo messenger:failed.

00:00:39.436 --> 00:00:45.986 align:middle
Prueba el de messenger:failed:show: ¡Bien!

00:00:46.166 --> 00:00:49.256 align:middle
Ahí están nuestros 4 mensajes fallidos...

00:00:49.596 --> 00:00:51.736 align:middle
ahí sentados esperando a que los miremos.

00:00:52.526 --> 00:00:54.916 align:middle
Imaginemos que no estamos
seguros de qué ha fallado

00:00:54.916 --> 00:00:57.156 align:middle
en estos mensajes y queremos comprobarlo.

00:00:58.026 --> 00:01:07.446 align:middle
Empieza pasando el id 115: me encanta: ¡nos
muestra el mensaje de error, la clase de error

00:01:07.756 --> 00:01:11.846 align:middle
y un historial de las desventuras
del mensaje por nuestro sistema!

00:01:12.926 --> 00:01:19.966 align:middle
Ha fallado, ha sido redistribuido al transporte
asíncrono en 05, en 06 y luego en 07,

00:01:20.276 --> 00:01:23.766 align:middle
finalmente ha fallado y ha sido
redistribuido al transporte failed.

00:01:25.006 --> 00:01:27.996 align:middle
Si añadimos un -vv en el comando...

00:01:29.726 --> 00:01:34.196 align:middle
Ahora podemos ver un seguimiento completo de
la pila de lo que ocurrió en esa excepción.

00:01:34.196 --> 00:01:40.236 align:middle
Esta es una forma realmente poderosa de averiguar
qué ha ido mal y qué hacer a continuación:

00:01:40.906 --> 00:01:44.746 align:middle
¿tenemos un fallo en nuestra aplicación que
debemos arreglar antes de volver a intentarlo?

00:01:45.266 --> 00:01:49.196 align:middle
¿O tal vez fue un fallo temporal y
podemos volver a intentarlo ahora?

00:01:49.836 --> 00:01:54.506 align:middle
O tal vez, por alguna razón, queramos
eliminar este mensaje por completo.

00:01:54.506 --> 00:02:01.346 align:middle
Si quieres eliminarlo sin reintentarlo,
ese es el comando messenger:failed:remove.

00:02:02.076 --> 00:02:04.156 align:middle
Pero... ¡vamos a reintentarlo!

00:02:04.856 --> 00:02:08.366 align:middle
De vuelta en el manejador, vuelve a
cambiar esto para que falle aleatoriamente.

00:02:09.826 --> 00:02:15.306 align:middle
Hay dos formas de trabajar con el comando
reintentar: puedes reintentar un id específico

00:02:15.416 --> 00:02:20.296 align:middle
como el que ves aquí o puedes
reintentar los mensajes uno a uno.

00:02:20.996 --> 00:02:21.586 align:middle
Vamos a hacerlo. Ejecuta:

00:02:21.976 --> 00:02:29.826 align:middle
php bin/console messenger:failed:retry
Esto es algo parecido

00:02:29.826 --> 00:02:36.606 align:middle
a cómo funciona messenger:consume, excepto que
te pregunta antes de intentar cada mensaje y, en

00:02:36.896 --> 00:02:39.876 align:middle
lugar de ejecutar este comando
todo el tiempo en producción,

00:02:40.376 --> 00:02:44.826 align:middle
lo ejecutarás manualmente cada vez que tengas
algunos mensajes fallidos que necesites procesar.

00:02:45.886 --> 00:02:51.686 align:middle
¡Genial! Vemos los detalles y nos
pregunta si queremos volver a intentarlo.

00:02:51.686 --> 00:02:56.716 align:middle
Al igual que con show, puedes pasar -vv
para ver los detalles completos del mensaje.

00:02:57.656 --> 00:02:58.726 align:middle
Di "sí".

00:03:00.936 --> 00:03:02.066 align:middle
Se procesa...

00:03:02.456 --> 00:03:04.656 align:middle
y continúa con el siguiente.

00:03:05.446 --> 00:03:10.726 align:middle
De hecho, déjame intentarlo de nuevo con
-vv para que podamos ver lo que ocurre:

00:03:12.096 --> 00:03:14.846 align:middle
Esta vez vemos todos los detalles.

00:03:15.706 --> 00:03:17.506 align:middle
Vuelve a decir "sí" y...

00:03:17.786 --> 00:03:23.256 align:middle
bonito: "Mensaje recibido", "Mensaje
gestionado" y al siguiente mensaje.

00:03:24.166 --> 00:03:24.926 align:middle
¡Estamos en racha!

00:03:25.816 --> 00:03:31.856 align:middle
Fíjate en que el identificador de este mensaje
es el 117 - eso será importante en un segundo.

00:03:33.046 --> 00:03:34.796 align:middle
Pulsa "Sí" para reintentar
este mensaje también.

00:03:36.206 --> 00:03:39.766 align:middle
¡Vaya! ¡Esta vez ha vuelto a fallar!

00:03:40.356 --> 00:03:41.346 align:middle
¿Qué significa esto?

00:03:41.846 --> 00:03:47.416 align:middle
Bueno, recuerda que el transporte de
fallos es en realidad un transporte normal

00:03:47.416 --> 00:03:49.636 align:middle
que estamos utilizando de forma especial.

00:03:50.196 --> 00:03:53.566 align:middle
Y así, cuando un mensaje
falla aquí, Messenger...

00:03:53.706 --> 00:03:54.786 align:middle
¡lo reintenta!

00:03:55.396 --> 00:03:58.426 align:middle
Sí, ¡se envió de nuevo
al transporte de fallos!

00:03:59.366 --> 00:04:07.916 align:middle
Pulsaré Control+C y volveré a ejecutar el comando
show: Ese id 119 no estaba allí cuando empezamos.

00:04:08.606 --> 00:04:12.596 align:middle
No, cuando se procesó el mensaje 117, falló,

00:04:13.096 --> 00:04:19.806 align:middle
se volvió a enviar al transporte de
fallos como id 119, y luego se eliminó.

00:04:20.396 --> 00:04:25.586 align:middle
Y así, a menos que cambies la configuración,
los mensajes se reintentarán 3 veces

00:04:25.666 --> 00:04:30.886 align:middle
en el transporte de fallos antes de ser
finalmente descartados por completo.

00:04:31.836 --> 00:04:36.866 align:middle
Pero si miras el mensaje reintentado
más de cerca Hay un pequeño error:

00:04:37.336 --> 00:04:39.216 align:middle
faltan el error y la clase de error.

00:04:39.876 --> 00:04:42.306 align:middle
Los datos siguen estando en la base de datos...

00:04:42.306 --> 00:04:44.746 align:middle
sólo que no se muestran correctamente aquí.

00:04:45.056 --> 00:04:50.256 align:middle
Pero puedes ver el historial del mensaje:
incluso que fue enviado al transporte failed

00:04:50.656 --> 00:04:53.256 align:middle
y luego enviado de nuevo
al transporte failed. Por

00:04:54.466 --> 00:04:59.566 align:middle
cierto, puedes pasar una opción
--force al comando retry si quieres

00:04:59.566 --> 00:05:05.716 align:middle
que reintente los mensajes uno a uno sin
preguntarte cada vez si debe hacerlo o no.

00:05:06.526 --> 00:05:14.326 align:middle
Además, no todos los tipos de transporte -como AMQP o
Redis- admiten todas las características que acabamos de ver

00:05:14.776 --> 00:05:17.466 align:middle
si lo utilizas como transporte de fallos.

00:05:18.356 --> 00:05:21.246 align:middle
Eso puede cambiar en el
futuro, pero en este momento -

00:05:21.576 --> 00:05:25.686 align:middle
Doctrine es el transporte más
robusto para usar para los fallos.

00:05:26.526 --> 00:05:32.136 align:middle
De todos modos, por muy chulo que sea fallar, volvamos atrás
y eliminemos el código que está rompiendo nuestro manejador.

00:05:32.616 --> 00:05:33.086 align:middle
Porque...

00:05:33.496 --> 00:05:36.976 align:middle
es hora de profundizar en el
funcionamiento de Messenger:

00:05:37.496 --> 00:05:39.876 align:middle
es hora de hablar del middleware
