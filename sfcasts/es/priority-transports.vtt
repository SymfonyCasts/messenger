WEBVTT

00:00:01.126 --> 00:00:05.646 align:middle
Los dos mensajes que enviamos al
transporte async son AddPonkaToImage

00:00:05.716 --> 00:00:10.456 align:middle
y DeletePhotoFile, que se encargan de eliminar
el archivo físico del sistema de archivos.

00:00:10.836 --> 00:00:15.786 align:middle
Y... el segundo no es algo
que el usuario realmente note

00:00:15.786 --> 00:00:18.406 align:middle
o le importe, es sólo una
operación de mantenimiento.

00:00:18.406 --> 00:00:24.556 align:middle
Si ocurriera dentro de 5 minutos o dentro
de 10 días, al usuario no le importaría.

00:00:25.446 --> 00:00:27.366 align:middle
Esto crea una situación interesante.

00:00:27.366 --> 00:00:34.756 align:middle
Nuestro trabajador maneja las cosas según el principio de
"primero en entrar, primero en salir": si enviamos 5 mensajes

00:00:34.756 --> 00:00:39.616 align:middle
al transporte, el trabajador los manejará
en el orden en que los haya recibido.

00:00:40.546 --> 00:00:46.586 align:middle
Esto significa que si se borran un montón de
imágenes y luego alguien sube una nueva foto...

00:00:47.016 --> 00:00:52.696 align:middle
el trabajador procesará todos esos mensajes
de borrado antes de añadir finalmente Ponka

00:00:52.696 --> 00:00:53.326 align:middle
a la foto.

00:00:53.326 --> 00:00:54.606 align:middle
Y eso...

00:00:54.606 --> 00:00:56.126 align:middle
no es lo ideal. Lo

00:00:56.746 --> 00:01:02.116 align:middle
cierto es que los mensajes de AddPonkaToImage
deberían tener mayor prioridad en nuestro sistema

00:01:02.276 --> 00:01:06.906 align:middle
que los de DeletePhotoFile: siempre
queremos que AddPonkaToImage

00:01:06.906 --> 00:01:11.156 align:middle
se gestione antes que cualquier
mensaje de DeletePhotoFile...

00:01:11.616 --> 00:01:13.426 align:middle
aunque se hayan añadido primero.

00:01:14.146 --> 00:01:17.696 align:middle
Entonces... ¿podemos establecer
una prioridad en los mensajes?

00:01:18.366 --> 00:01:19.656 align:middle
No exactamente. Resulta

00:01:20.366 --> 00:01:26.106 align:middle
que en el mundo de las colas, esto
se resuelve creando varias colas

00:01:26.496 --> 00:01:29.366 align:middle
y dando a cada una de ellas una prioridad.

00:01:30.366 --> 00:01:34.596 align:middle
En Symfony Messenger, eso se
traduce en múltiples transportes.

00:01:35.746 --> 00:01:38.896 align:middle
Debajo del transporte async,
crea un nuevo transporte llamado,

00:01:39.536 --> 00:01:42.156 align:middle
qué tal, async_priority_high.

00:01:44.276 --> 00:01:49.356 align:middle
Utilicemos el mismo DSN que antes,
que en nuestro caso es doctrine.

00:01:50.626 --> 00:01:54.956 align:middle
Debajo, añade options, y luego
queue_name ajustado a high.

00:01:56.046 --> 00:01:58.976 align:middle
El nombre high no es importante:
podríamos utilizar cualquier cosa.

00:01:59.926 --> 00:02:03.506 align:middle
La opción queue_name es
específica del transporte Doctrine

00:02:03.746 --> 00:02:09.746 align:middle
y, en última instancia, controla el valor de una
columna de la tabla, que funciona como una categoría

00:02:09.946 --> 00:02:14.416 align:middle
y nos permite tener varias "colas"
de mensajes dentro de la misma tabla.

00:02:15.476 --> 00:02:20.826 align:middle
Y además, para cualquier transporte, puedes
configurar estas opciones como parámetros de consulta

00:02:20.826 --> 00:02:23.716 align:middle
en el DSN o bajo esta clave options.

00:02:23.716 --> 00:02:30.536 align:middle
En este momento tenemos tres colas, todas ellas
almacenadas en la misma tabla de la base de datos,

00:02:30.636 --> 00:02:33.336 align:middle
pero con diferentes valores de queue_name.

00:02:33.806 --> 00:02:39.816 align:middle
Y ahora que tenemos este nuevo transporte, podemos
dirigir AddPonkaToImage a async_priority_high.

00:02:41.376 --> 00:02:42.536 align:middle
Si nos detenemos ahora...

00:02:42.946 --> 00:02:45.816 align:middle
todo lo que hemos hecho
realmente es posibilitar el

00:02:45.816 --> 00:02:50.146 align:middle
envío de estas dos clases de mensajes
diferentes a dos colas diferentes.

00:02:50.566 --> 00:02:53.686 align:middle
Pero no hay nada especial
en async_priority_high.

00:02:54.386 --> 00:02:59.116 align:middle
Claro, he puesto la palabra "alto" en su
nombre, pero no es diferente de async.

00:02:59.816 --> 00:03:01.956 align:middle
La verdadera magia viene del trabajador.

00:03:01.956 --> 00:03:06.686 align:middle
Busca tu terminal donde se esté ejecutando el
trabajador y pulsa Control+C para detenerlo.

00:03:07.836 --> 00:03:14.236 align:middle
Si sólo ejecutas messenger:consume sin ningún
argumento y tienes más de un transporte,

00:03:14.606 --> 00:03:18.866 align:middle
te pregunta qué transporte quieres consumir:
php bin/console messenger:consume Es decir,

00:03:19.086 --> 00:03:22.616 align:middle
de qué transporte quieres recibir mensajes.

00:03:23.356 --> 00:03:27.806 align:middle
Pero, en realidad, puedes leer mensajes
de varios transport es a la vez

00:03:28.276 --> 00:03:31.796 align:middle
y decirle al trabajador
cuál debe leer primero.

00:03:33.106 --> 00:03:38.126 align:middle
Fíjate en esto: Yo digo
async_priority_high, async.

00:03:39.376 --> 00:03:44.566 align:middle
Esto le dice al trabajador: primero pregunta
a async_priority_high si tiene algún mensaje.

00:03:44.566 --> 00:03:48.626 align:middle
Si no lo tiene, entonces ve a
comprobar el transporte async.

00:03:49.986 --> 00:03:51.476 align:middle
Deberíamos poder ver esto en acción.

00:03:52.226 --> 00:03:57.046 align:middle
Actualizaré la página, borraré un montón
de imágenes aquí tan rápido como pueda

00:04:02.516 --> 00:04:04.396 align:middle
y luego subiré un par de fotos.

00:04:07.336 --> 00:04:12.576 align:middle
Comprueba la salida del terminal:
Se maneja DeletePhotoFile y luego...

00:04:13.236 --> 00:04:20.096 align:middle
AddPonkaToImage, otro AddPonkaToImage,
otro AddPonkaToImage y...

00:04:20.446 --> 00:04:27.576 align:middle
¡sí! Vuelve a gestionar el
DeletePhotoFile de menor prioridad.

00:04:27.576 --> 00:04:33.826 align:middle
Así que, al principio -antes de la carga- sí que
consumía unos cuantos mensajes de DeletePhotoFile.

00:04:34.326 --> 00:04:39.666 align:middle
Pero en cuanto vio un mensaje en
ese transporte async_priority_high,

00:04:40.036 --> 00:04:43.286 align:middle
los consumió todos hasta que estuvo vacío.

00:04:44.346 --> 00:04:49.386 align:middle
Cuando lo estaba, volvía a
consumir mensajes de async.

00:04:50.526 --> 00:04:54.266 align:middle
Básicamente, cada vez que el
trabajador busca el siguiente mensaje,

00:04:54.526 --> 00:04:57.266 align:middle
comprueba primero el
transporte de mayor prioridad

00:04:57.636 --> 00:05:03.066 align:middle
y sólo pregunta al siguiente transporte
-o transportes- si está vacío.

00:05:03.896 --> 00:05:05.126 align:middle
Y... ¡ya está!

00:05:05.806 --> 00:05:10.196 align:middle
Crea un nuevo transporte para el número
de "niveles" de prioridad que necesites,

00:05:10.766 --> 00:05:13.736 align:middle
y luego dile al comando del trabajador
en qué orden debe procesarlos.

00:05:14.716 --> 00:05:18.856 align:middle
Ah, y en lugar de utilizar esta forma
interactiva de hacer las cosas, puedes ejecutar:

00:05:18.966 --> 00:05:26.846 align:middle
php bin/console messenger:consume
async_priority_high async Perfecto.

00:05:27.706 --> 00:05:33.696 align:middle
A continuación, vamos a hablar de una opción que podemos
utilizar para facilitar el desarrollo al utilizar colas...

00:05:34.146 --> 00:05:38.966 align:middle
porque tener que recordar siempre que hay que ejecutar el
comando trabajador mientras se codifica puede ser un dolor
