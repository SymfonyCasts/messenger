WEBVTT

00:00:01.116 --> 00:00:06.526 align:middle
Ahora sabemos que cada mensaje se reintentará
3 veces -lo cual es configurable- y luego,

00:00:06.806 --> 00:00:10.586 align:middle
si el tratamiento sigue
fallando, será "rechazado "...

00:00:10.826 --> 00:00:15.906 align:middle
que es una palabra de "cola" para decir: se
eliminará del transporte y se perderá para siempre.

00:00:16.356 --> 00:00:17.876 align:middle
Eso es... ¡un fastidio!

00:00:18.486 --> 00:00:22.166 align:middle
Nuestro último reintento ocurrió
14 segundos después del primero...

00:00:22.476 --> 00:00:26.896 align:middle
pero si el gestor falla porque un servidor
de terceros está temporalmente caído...

00:00:27.336 --> 00:00:31.766 align:middle
entonces, si ese servidor se cae
aunque sólo sea durante 30 segundos...

00:00:31.926 --> 00:00:33.746 align:middle
el mensaje se perderá para siempre

00:00:34.416 --> 00:00:38.306 align:middle
¡Sería mejor si pudiéramos reintentarlo
una vez que el servidor volviera a funcionar!

00:00:39.266 --> 00:00:40.776 align:middle
La respuesta a esto es...

00:00:41.066 --> 00:00:42.546 align:middle
¡el transporte de fallos!

00:00:42.686 --> 00:00:46.356 align:middle
En primer lugar, voy a
descomentar un segundo transporte.

00:00:47.346 --> 00:00:50.656 align:middle
En general, puedes tener tantos
transportes como quieras.

00:00:51.136 --> 00:00:54.416 align:middle
Este comienza con doctrine://default.

00:00:54.416 --> 00:00:57.166 align:middle
Si miras nuestro archivo .env...

00:00:58.106 --> 00:01:04.426 align:middle
¡eh! ¡ Eso es exactamente lo que nuestra
variable de entorno MESSENGER_TRANSPORT_DSN está

00:01:04.426 --> 00:01:04.896 align:middle
configurada!

00:01:05.766 --> 00:01:11.756 align:middle
Sí, tanto nuestro transporte async como el nuevo
failed están utilizando el transporte doctrine

00:01:11.756 --> 00:01:13.746 align:middle
y la conexión de doctrina default.

00:01:14.336 --> 00:01:19.706 align:middle
Pero el segundo también tiene esta
pequeña opción ?queue_name=failed.

00:01:19.986 --> 00:01:21.636 align:middle
Oooooooooooo.

00:01:22.566 --> 00:01:25.856 align:middle
Vuelve a lo que estés usando para
inspeccionar la base de datos y comprueba

00:01:25.856 --> 00:01:32.666 align:middle
la tabla de colas: DESCRIBE
messenger_messages; Ah.

00:01:33.536 --> 00:01:36.356 align:middle
Una de las columnas de esta
tabla se llama queue_name.

00:01:37.076 --> 00:01:40.256 align:middle
Esta columna nos permite
crear varios transport es

00:01:40.256 --> 00:01:42.886 align:middle
que almacenan todos los
mensajes en la misma tabla.

00:01:43.576 --> 00:01:47.786 align:middle
Messenger sabe qué mensajes pertenecen
a cada transporte gracias a este valor.

00:01:48.566 --> 00:01:52.176 align:middle
Todos los mensajes enviados al transporte
failed tendrán un valor failed...

00:01:52.396 --> 00:01:54.866 align:middle
que puede ser cualquier cosa - y
los mensajes enviados al transporte

00:01:54.866 --> 00:01:57.696 align:middle
async utilizarán el valor por defecto...

00:01:57.776 --> 00:01:58.926 align:middle
que es default. Por

00:02:00.016 --> 00:02:03.746 align:middle
cierto, cada transporte tiene una serie
de opciones de conexión diferentes

00:02:03.896 --> 00:02:08.496 align:middle
y hay dos formas de pasarlas: como
parámetros de consulta como éste

00:02:08.936 --> 00:02:15.666 align:middle
o mediante un formato expandido en el que pones el dsn
en su propia línea y luego añades una clave options

00:02:16.126 --> 00:02:17.836 align:middle
con lo que necesites debajo.

00:02:18.606 --> 00:02:19.926 align:middle
¿Qué opciones puedes poner aquí?

00:02:20.826 --> 00:02:27.186 align:middle
Cada tipo de transporte -como doctrine o
amqp - tiene su propio conjunto de opciones.

00:02:28.116 --> 00:02:32.116 align:middle
Ahora mismo, no están bien documentadas,
pero son fáciles de encontrar...

00:02:32.186 --> 00:02:33.686 align:middle
si sabes dónde buscar.

00:02:34.866 --> 00:02:38.916 align:middle
Por convención, cada tipo de transporte
tiene una clase llamada Connection.

00:02:39.916 --> 00:02:43.556 align:middle
Pulsaré Shift+Shift en PhpStorm,
buscaré Connection.php...

00:02:43.556 --> 00:02:44.946 align:middle
y buscaré los archivos.

00:02:46.856 --> 00:02:47.596 align:middle
¡Ahí están!

00:02:48.126 --> 00:02:52.576 align:middle
Una clase Connection para
Amqp, Doctrine y Redis.

00:02:52.576 --> 00:02:53.716 align:middle
Abre la de Doctrine.

00:02:54.856 --> 00:03:00.206 align:middle
Todas estas clases tienen documentación cerca de la
parte superior que describe sus opciones, en este caso:

00:03:00.326 --> 00:03:06.526 align:middle
queue_name, table_name y
algunas otras, como auto_setup.

00:03:07.286 --> 00:03:12.716 align:middle
Antes hemos visto que Doctrine creará la
tabla messenger_messages automáticamente

00:03:12.716 --> 00:03:13.696 align:middle
si no existe.

00:03:13.696 --> 00:03:18.356 align:middle
Si no quieres que eso ocurra, debes
establecer auto_setup en false.

00:03:18.966 --> 00:03:23.656 align:middle
El transporte con más opciones se
puede ver en la clase Conexión Amqp.

00:03:24.526 --> 00:03:27.066 align:middle
Hablaremos de Amqp más
adelante en el tutorial.

00:03:28.196 --> 00:03:29.716 align:middle
En cualquier caso, ¡volvemos a ello!

00:03:30.096 --> 00:03:32.526 align:middle
Ahora tenemos un nuevo
transporte llamado failed...

00:03:32.856 --> 00:03:37.266 align:middle
que, a pesar de su nombre, es igual
que cualquier otro transporte.

00:03:37.806 --> 00:03:40.816 align:middle
Si quisiéramos, podríamos encaminar
las clases de mensajes hacia allí

00:03:40.926 --> 00:03:44.106 align:middle
y consumirlas, igual que hacemos con async.

00:03:44.796 --> 00:03:48.016 align:middle
Pero... el objetivo de este
transporte es diferente.

00:03:48.826 --> 00:03:52.926 align:middle
Cerca de la parte superior, hay otra
clave llamada failure_transport.

00:03:53.636 --> 00:03:58.426 align:middle
Descomenta eso y observa que apunta
a nuestro nuevo transporte failed.

00:03:59.386 --> 00:03:59.986 align:middle
¿Qué hace?

00:04:00.566 --> 00:04:02.116 align:middle
¡Veámoslo en acción!

00:04:02.116 --> 00:04:08.906 align:middle
Primero, ve a reiniciar
nuestro trabajador: ¡Woh!

00:04:09.146 --> 00:04:13.946 align:middle
Esta vez, nos pregunta qué "receptor"
-que básicamente significa qué

00:04:13.976 --> 00:04:16.356 align:middle
"transporte"- queremos consumir. Un trabajador

00:04:16.356 --> 00:04:21.316 align:middle
puede leer de uno o varios
transportes, algo de lo que hablaremos

00:04:21.316 --> 00:04:23.916 align:middle
más adelante con los transportes
"priorizados". Vamos a consumir

00:04:24.766 --> 00:04:28.526 align:middle
sólo el transporte async
- manejaremos los mensajes

00:04:28.526 --> 00:04:30.466 align:middle
del transporte failed de otra manera.

00:04:31.236 --> 00:04:37.346 align:middle
Y en realidad, para facilitarnos la vida, podemos
pasar async como argumento para que no nos pregunte

00:04:37.346 --> 00:04:41.116 align:middle
qué transporte utilizar cada vez: Ahora...

00:04:41.366 --> 00:04:43.216 align:middle
¡vamos a subir algunas imágenes!

00:04:48.356 --> 00:04:49.536 align:middle
Entonces... por aquí...

00:04:50.056 --> 00:04:53.796 align:middle
muy rápidamente, los 4 agotan sus reintentos

00:04:53.976 --> 00:04:56.516 align:middle
y acaban siendo rechazados por el transporte.

00:04:57.466 --> 00:05:00.766 align:middle
Hasta ahora, eso significaba que
habían desaparecido para siempre.

00:05:01.436 --> 00:05:02.036 align:middle
Pero esta vez...

00:05:02.336 --> 00:05:04.166 align:middle
eso no ha ocurrido.

00:05:04.166 --> 00:05:08.126 align:middle
Antes de eliminar el mensaje de la cola, dice

00:05:08.586 --> 00:05:15.406 align:middle
Mensaje rechazado AddPonkaToImage se enviará
al transporte de fallo "fallido" Y luego...

00:05:15.656 --> 00:05:16.876 align:middle
"Enviando mensaje".

00:05:17.976 --> 00:05:23.006 align:middle
Así que se eliminó del transporte
async, pero sigue existiendo

00:05:23.066 --> 00:05:25.396 align:middle
porque se envió al transporte "fallido".

00:05:26.226 --> 00:05:29.426 align:middle
¿Cómo podemos ver qué mensajes
han fallado y volver a intentarlo

00:05:29.426 --> 00:05:31.296 align:middle
si pensamos que esos fallos eran temporales?

00:05:31.766 --> 00:05:34.316 align:middle
Con un par de brillantes y
nuevos comandos de consola.

00:05:34.896 --> 00:05:36.126 align:middle
Vamos a hablar de ellos a continuación
